{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","todos","setTodos","inputText","setInputText","setStatus","className","value","onChange","e","target","type","onClick","preventDefault","title","completed","important","id","Date","now","name","React","memo","Todo","todo","useState","editingText","setEditingText","editingTodo","setEditingTodo","filter","item","map","TodoList","filteredTodos","App","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90507cfa.chunk.js","sourcesContent":["import React from 'react';\n\nconst TodoForm = ({ todos, setTodos, inputText, setInputText, setStatus }) => {\n    // console.log('TodoForm');\n    const handleInput = (e) => {\n        setInputText(e.target.value)\n    }\n\n    const submitTodoHandler = (e) => {\n        e.preventDefault()\n        setTodos([\n            ...todos,\n            {title: inputText, completed: false, important: false, id: Date.now()}\n        ])\n        setInputText('')\n    }\n\n    const statusHandler = (e) => {\n        setStatus(e.target.value);\n    }\n    return (\n        <>\n        <header>\n            <p>Todo List</p>\n        </header>\n        <form>\n            <div>\n            <input className=\"todo-input\" value={inputText} onChange={handleInput} type='text' />\n            <button className=\"todo-button\" onClick={submitTodoHandler} type='submit'>\n                  <i className=\"material-icons\">add</i>\n            </button>\n            </div>\n            <div className='select'>\n                <select className='filter-todo' onChange={statusHandler} name='todos'>\n                    <option value='all'>All</option>\n                    <option value='completed'>Completed</option>\n                    <option value='important'>Important</option>\n                </select>\n            </div>\n        </form>\n        </>\n    )\n}\n\nexport default React.memo(TodoForm);","import React, { useState } from 'react';\n\nconst Todo = ({ title, todos, setTodos, todo }) => {\n    // console.log(\"Todo\");\n    const [editingText, setEditingText] = useState('');\n    const [editingTodo, setEditingTodo] = useState(null);\n    \n    const deleteHandler = () => {\n        setTodos(todos.filter((item) => item.id !== todo.id))\n    }\n\n    const completedHandler = () => {\n        setTodos(todos.map((item) => {\n            if(item.id === todo.id){\n                return{\n                    ...item, completed: !item.completed\n                }\n            }\n            return item \n        }))\n    }\n\n    const importantHandler = () => {\n        setTodos(todos.map((item) => {\n            if(item.id === todo.id){\n                return{\n                    ...item, important: !item.important\n                }\n            }\n            return item \n        }))\n    }\n\n    const editHandler = () => {\n        setTodos(todos.map((item) => {\n            if(item.id === todo.id){\n                todo.title = editingText\n            }\n            return item\n        }))\n        setEditingTodo(null);\n        setEditingText('');\n    }\n\n    return (\n        <div className='todo-block'>\n            {editingTodo === todo.id ? (\n            <input className='editing-inp' type='text' \n            onChange={(e) => setEditingText(e.target.value)} \n            value={editingText} />)\n            :\n            (<li className={`${todo.important ? 'important' : 'todo-text'}  ${todo.completed ? 'completed' : 'todo-text'} `}>{title}</li>)\n            }\n            <button className='btn-delete' onClick={deleteHandler}>\n            <i className=\"tiny material-icons\">close</i>\n            </button>\n            {editingTodo === todo.id ? \n            (<button onClick={() => editHandler(todo.id)}>\n                <i className=\"tiny material-icons\">done</i>\n            </button>) \n            : \n            (<button onClick={() => setEditingTodo(todo.id)}>\n                <i className=\"tiny material-icons\">edit</i>\n            </button>)}\n\n             <button onClick={completedHandler}>\n                <i className=\"tiny material-icons\">check_circle</i>\n            </button>\n           \n            <button className='buttons' onClick={importantHandler}>\n            <i className=\"tiny material-icons\">stars</i>\n            </button>\n        </div>\n    )\n}\n\nexport default React.memo(Todo) ;","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n    // console.log('TodoList');\n    return (\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {filteredTodos.map(todo => (\n                    <Todo \n                    key={todo.id} \n                    todos={todos}\n                    todo={todo} \n                    setTodos={setTodos} \n                    title={todo.title} \n                    id={todo.id} />\n                ))}\n            </ul>\n        </div>\n    )\n}\n\nexport default TodoList;","import { useEffect, useState } from 'react';\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    getLocalTodos()\n  }, [])\n\n  useEffect(() => {\n    const filterHandler = () => {\n      switch(status){\n        case 'completed' :\n          setFilteredTodos(todos.filter((todo) => todo.completed === true))\n          break;\n        case 'important' :\n          setFilteredTodos(todos.filter((todo) => todo.important === true))\n          break;\n        default:\n          setFilteredTodos(todos)\n          break;\n      }\n    }\n  \n    const saveLocalTodos = () => {\n        localStorage.setItem('todos', JSON.stringify(todos))\n    }\n    filterHandler()\n    saveLocalTodos()\n  }, [todos, status])\n\n\n\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){\n      localStorage.setItem('todos', JSON.stringify([]))\n    }else{\n      let todoLocal = JSON.parse(localStorage.getItem('todos'))\n      setTodos(todoLocal)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <TodoForm todos={todos}\n      setTodos={setTodos}\n      inputText={inputText}\n      setInputText={setInputText}\n      setStatus={setStatus}\n      />\n      <TodoList \n      todos={todos} \n      setTodos={setTodos} \n      filteredTodos={filteredTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}